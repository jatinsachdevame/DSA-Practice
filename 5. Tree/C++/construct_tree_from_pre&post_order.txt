
class Solution {
public:
    unordered_map<int, int> m; // value->index
    TreeNode* constructFromPrePost(vector<int>& pre, vector<int>& post) 
    {
        int len = post.size();
        for (int i = 0; i < len; i++)
            m[post[i]] = i;
        return construct(pre, post, 0, len - 1, 0, len - 1);
    }
    
    TreeNode* construct(vector<int>& pre, vector<int>& post, int pre_S, int pre_E, int post_S, int post_E)
    {
        TreeNode* root = new TreeNode(pre[pre_S]);
        if (pre_S == pre_E) 
            return root;
        int t = pre[pre_S + 1];
        int idx = m[t];
        int len = idx - post_S + 1;
        root->left = construct(pre, post, pre_S + 1, pre_S + len, post_S, post_S + len - 1);
        if (idx + 1 == post_E)
            return root;
        root->right = construct(pre, post, pre_S + len + 1, pre_E, idx + 1, post_E - 1);
         return root;
        
    }
};



