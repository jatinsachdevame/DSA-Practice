// Iterative method to find full node(having left as well as right child) of Binary Tree  
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
struct Node
{
    int data;
    Node *left , *right;
    Node(int d)
    {
        data=d;
        left=right=NULL;
    }
};
int full_node(Node *root)
{
      queue<Node*> q;
    Node *temp;
    int count=0;
    if(root==NULL)
      return 0;
      
  q.push(root);
       
    while(!q.empty())
    {
         temp=q.front();
         q.pop();
    
         if(temp->left != NULL && temp->right!=NULL)
             count++;
         
         if(temp->right)
              q.push(temp->right);
         if( temp->left)
             q.push(temp->left);
         
    }
        return count;
}
int main()
{
    Node *root = new Node(1);
    root->left=new Node(2);
    root->right=new Node(3);
    root->left->left=new Node(4);
    root->left->right=new Node(5);

   cout<<"\n No. of full  nodes in  a Tree is  : \n"<<full_node(root);

   
    return 0;
}

